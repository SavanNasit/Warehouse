package com.accrete.sixorbit.utils;import android.Manifest;import android.annotation.TargetApi;import android.app.Activity;import android.content.Context;import android.content.pm.PackageManager;import android.os.Build;import android.support.v4.app.Fragment;import java.util.ArrayList;import java.util.List;/** * Created by poonam on 5/6/17. */public class PersmissionConstant {    public static boolean isMSupportDevice(Context ctx) {        /**         * @return true in case of M Device,         * false in case of below M devices         */        if (Build.VERSION.SDK_INT >= MSupportConstants.SDK_VERSION)            return true;        else            return false;    }    /**     * for the activity     *     * @param mActivity      Calling activity Context     * @param permissionName for which permission is needed for performing the particular function     * @param requestcode    request code to identify the request     * @return true in case of permission is granted     * false in case of permission is not granted     * in case of false we have to request that permission     */    @TargetApi(23)    public static boolean checkOrRequestPermission(Activity mActivity, String permissionName, int requestcode) {        if (PersmissionConstant.isMSupportDevice(mActivity)) {            if (mActivity.checkSelfPermission(permissionName)                    == PackageManager.PERMISSION_GRANTED) {                return true;            } else {                mActivity.requestPermissions(new String[]{permissionName}, requestcode);                return false;            }        } else            return true;    }    /**     * for the fragment     *     * @param f              Calling activity Context     * @param permissionName for which permission is needed for performing the perticular funtion     * @param requestcode    request code to identify the request     * @return true in case of permission is granted     * false in case of permission is not granted     * in case of false we have to request that permission     */    @TargetApi(23)    public static boolean checkOrRequestPermission(Fragment f, String permissionName, int requestcode) {        if (PersmissionConstant.isMSupportDevice(f.getActivity())) {            if (f.getActivity().checkSelfPermission(permissionName)                    == PackageManager.PERMISSION_GRANTED) {                return true;            } else {                f.requestPermissions(new String[]{permissionName}, requestcode);                return false;            }        } else            return true;    }    /**     * Method to check permissions set and in this method we can     * send the bunch of permission we needed to perform     * the particular function     *     * @param mActivity     Calling activity context     * @param fragment      Calling fragment instance     * @param permissionSet Permission set to check     * @param requestCode   request code     * @return true in case of permission is granted or pre marshmallow     * false in case of permission is not granted     * in case of false we have to request that permission     */    @TargetApi(23)    public static boolean checkPermission(Activity mActivity, Fragment fragment, String[] permissionSet, int requestCode) {        if (PersmissionConstant.isMSupportDevice(mActivity)) {            List<String> permissions = new ArrayList<>();            for (String aPermissionSet : permissionSet) {                int hasPermission = mActivity.checkSelfPermission(aPermissionSet);                if (hasPermission != PackageManager.PERMISSION_GRANTED) {                    permissions.add(aPermissionSet);                }            }            if (!permissions.isEmpty()) {                if (fragment != null)                    fragment.requestPermissions(permissions.toArray(new String[permissions.size()]), requestCode);                else                    mActivity.requestPermissions(permissions.toArray(new String[permissions.size()]), requestCode);                return false;            } else                return true;        } else            return true;    }    /**     * Method to check single permission with rationale     *     * @param mActivity   Calling activity context     * @param fragment    Calling fragment instance     * @param permissions  Permission to check     * @param requestCode request code     * @return true in case of permission is granted or pre marshmallow     * false in case of permission is not granted     * in case of false we have to request that permission     */    @TargetApi(23)    public static boolean checkPermissionWithRationale(final Activity mActivity, final Fragment fragment,                                                       final String[] permissions, final int requestCode) {        if (PersmissionConstant.isMSupportDevice(mActivity)) {            List<String> permissionsNeeded = new ArrayList<String>();            final List<String> permissionsList = new ArrayList<String>();            for (int i = 0; i < permissions.length; i++) {                if (!addPermission(mActivity, permissionsList, permissions[i]))                    permissionsNeeded.add(getTitleOfPermission(permissions[i]));            }            mActivity.requestPermissions(permissions,                    requestCode);//            if (permissionsList.size() > 0) {//                if (permissionsNeeded.size() > 0) {//                    // Need Rationale//                    String message = "You need to grant access to " + permissionsNeeded.get(0);//                    for (int i = 1; i < permissionsNeeded.size(); i++)//                        messageTextView = messageTextView + ", " + permissionsNeeded.get(i);//////                    AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);//                    builder.setProfile_name("Need Permission");//                    builder.setMessage(message);//                    builder.setPositiveButton("Grant", new DialogInterface.OnClickListener() {//                        @Override//                        public void onClick(DialogInterface dialog, int which) {//                            dialog.cancel();////                        }//                    });//                    builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {//                        @Override//                        public void onClick(DialogInterface dialog, int which) {//                            dialog.cancel();//                        }//                    });////                    builder.show();////                    return false;//////                }//                mActivity.requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),//                        requestCode);////                return false;//            }            return true;        }        return true;    }    @TargetApi(Build.VERSION_CODES.M)    private static boolean addPermission(final Activity activity, final List<String> permissionsList, String permission) {        if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {            permissionsList.add(permission);            // Check for Rationale Option            if (!activity.shouldShowRequestPermissionRationale(permission)) {                return false;            }        }        return true;    }    private static  String getTitleOfPermission(String permission){        String msg="";        switch (permission){            case Manifest.permission.ACCESS_COARSE_LOCATION:                msg="Location";                break;            case Manifest.permission.ACCESS_FINE_LOCATION:                msg="GPS";                break;            case Manifest.permission.READ_EXTERNAL_STORAGE:                msg="Read Storage";                break;            case Manifest.permission.WRITE_EXTERNAL_STORAGE:                msg="Write Storage";                break;            case Manifest.permission.CALL_PHONE:                msg="Call";                break;            case Manifest.permission.READ_PHONE_STATE:                msg="Phone";                break;            case Manifest.permission.CAMERA:                msg="Camera";                break;            case Manifest.permission.RECORD_AUDIO:                msg="Microphone";                break;            case Manifest.permission.READ_CONTACTS:                msg="Contacts";                break;            default:                msg="";        }        return msg;    }}